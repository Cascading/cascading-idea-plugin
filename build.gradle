/*
 * Copyright (c) 2007-2014 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: 'etc/version.gradle'
apply from: 'etc/s3Upload.gradle'

apply plugin: 'java'
apply from: 'etc/idea.gradle'

evaluationDependsOn( ':idea-deps' )

repositories {
  mavenCentral()
}

configurations {
  ideaCompile
}
version = releaseVersion

dependencies {

  ideaCompile fileTree( dir: 'intellij-src/out/dist.all.ce/lib', include: '*.jar' )

  testCompile group: 'junit', name: 'junit', version: '4.11'
}

compileJava {

  dependsOn project( ':idea-deps' ).build

  // prevent local libs from entering the idea module file
  classpath += configurations.ideaCompile
}

task filterXML( type: Copy ) {
  from processResources.source
  into processResources.destinationDir
  include '**/*.xml'

  filter { String line ->

    if( line == null || !line.contains( "<version>1.0</version>" ) )
      return line

    line.replaceFirst( /1\.0/, "${version}" )
  }
}

processResources {
  dependsOn << filterXML
  exclude '**/*.xml'
}

task assembleDist( dependsOn: jar ) {
  s3UploadArtifacts.dependsOn << assembleDist
  s3UploadPluginMeta.dependsOn << assembleDist
}

assembleDist << {

  file( s3UploadArtifacts.source ).delete();
  file( s3UploadArtifacts.source ).mkdir();
  file( s3UploadPluginMeta.source ).delete();
  file( s3UploadPluginMeta.source ).mkdir();

  copy {
    into s3UploadArtifacts.source
    from jar.archivePath
  }

  file( "${s3UploadArtifacts.source}/latest.txt" ).write( "http://${s3UploadArtifacts.destination}${jar.archiveName}" )

  // see: http://www.jetbrains.com/idea/webhelp/adding-plugins-to-enterprise-repositories.html
  file( "${s3UploadPluginMeta.source}/updatePlugins.xml" )
          .write(
          "<plugins>\n<plugin id=\"cascading\" url=\"http://${s3UploadArtifacts.destination}${jar.archiveName}\" version=\"${releaseVersion}\"/>\n</plugins>"
  )
}